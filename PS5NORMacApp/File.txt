import SwiftUI
import AppKit
import Combine
import FirebaseAuth
import UniformTypeIdentifiers

struct ContentView: View {
    @State private var editableData: Data = Data()
    @State private var selectedFile: URL? = nil
    @State private var serialNumber: String = "..."
    @State private var motherboardSerial: String = "..."
    @State private var boardVariant: String = "..."
    @State private var ps5Model: String = "..."
    @State private var fileSize: String = "..."
    @State private var wifiMacAddress: String = "..."
    @State private var lanMacAddress: String = "..."

    @State private var modifiedSerialNumber: String = ""
    @State private var modifiedBoardVariant: String = ""
    @State private var modifiedPs5Model: String = ""
    @State private var modifiedWifiMacAddress: String = ""
    @State private var modifiedLanMacAddress: String = ""

    @State private var fileData: Data = Data()
    @State private var errorCodeInput: String = ""
    @State private var selectedFileURL: URL? = nil
    @State private var errorDescription: String = ""
    @State private var showFileImporter = false
    @EnvironmentObject var settings: AppSettings
    @StateObject var authManager = AuthManager()
    @State private var errorSolution: String = ""
    @StateObject private var errorLookupViewModel = ErrorLookupViewModel()
    @StateObject private var viewModel = ErrorLookupViewModel()
    @State private var codeInput = ""
    @State private var codeDescription = ""
    @State private var codeSolution = ""
    @State private var command: String = ""
    @State private var someData: Data = Data()
    @State private var binData: Data = Data()
    @State private var someReferenceData: Data? = nil
    @StateObject private var uartViewModel = UARTViewModel()
    @State private var referenceData: Data? = nil
    @StateObject private var versionFetcher = VersionFetcher()
    @State private var updateStatus: String = ""
    @State private var selectedBinFile: URL? = nil
    @State private var modifiedNORData: Data? = nil
    @State private var showSaveConfirmation = false
    @State private var showSlimResults = false

    private let offsetOne: Int64 = 0x1c7010
    private let offsetTwo: Int64 = 0x1c7030
    private let wifiMacOffset: Int64 = 0x1C73C0
    private let lanMacOffset: Int64 = 0x1C4020
    private let serialOffset: Int64 = 0x1c7210
    private let variantOffset: Int64 = 0x1c7226
    private let moboSerialOffset: Int64 = 0x1C7200
    @State private var selectedModelTab: String = "Phat"
    private let modelTabs = ["Phat", "Slim", "Pro"]
    private var flatBoardVariantOptions: [String] {
        groupedBoardVariantOptions.flatMap { $0.models }
    }


    enum SidebarItem: String, CaseIterable, Identifiable {
        case results = "Results"
        case errorCodes = "Error Codes"
        case settings = "Settings"
        case hexEditor = "Hex Editor"
        case uart = "UART"
        case errorLog = "Compare"

        var id: String { rawValue }

        var iconName: String {
            switch self {
            case .results: return "doc.text.magnifyingglass"
            case .errorCodes: return "exclamationmark.triangle"
            case .settings: return "gearshape"
            case .hexEditor: return "chevron.left.slash.chevron.right"
            case .uart: return "terminal"
            case .errorLog: return "ladybug"
            }
        }
    }
    private let ps5ModelOptions = ["Digital Edition", "Disc Edition"]

    // MARK: - Options
    // Predefined options for PS5 model and board variants
    private let groupedBoardVariantOptions: [(header: String, models: [String])] = [
        ("PS5 (FAT/Standard)", [
            "CFI-1000A - Japan (Disc Edition)",
            "CFI-1000B - Japan (Digital Edition)",
            "CFI-1002A - Australia (Disc Edition)",
            "CFI-1002B - Australia (Digital Edition)",
            "CFI-1003A - UK/Ireland (Disc Edition)",
            "CFI-1003B - UK/Ireland (Digital Edition)",
            "CFI-1004A - Europe/Middle East/Africa (Disc Edition)",
            "CFI-1004B - Europe/Middle East/Africa (Digital Edition)",
            "CFI-1008A - Russia, Ukraine, India, Central Asia (Disc Edition)",
            "CFI-1008B - Russia, Ukraine, India, Central Asia (Digital Edition)",
            "CFI-1009A - China (Disc Edition)",
            "CFI-1009B - China (Digital Edition)",
            "CFI-1014A - South America (Disc Edition)",
            "CFI-1014B - South America (Digital Edition)",
            "CFI-1015A - US/Canada/Mexico (Disc Edition)",
            "CFI-1015B - US/Canada/Mexico (Digital Edition)",
            "CFI-1016A - Europe/Middle East/Africa (Disc Edition)",
            "CFI-1016B - Europe/Middle East/Africa (Digital Edition)",
            "CFI-1018A - Southeast Asia/HK/Macau/TW/S.Korea (Disc Edition)",
            "CFI-1018B - Southeast Asia/HK/Macau/TW/S.Korea (Digital Edition)",
            "CFI-1100A - Japan (Disc Edition)",
            "CFI-1100B - Japan (Digital Edition)",
            "CFI-1102A - Australia (Disc Edition)",
            "CFI-1102B - Australia (Digital Edition)",
            "CFI-1108A - Russia, Ukraine, India, Central Asia (Disc Edition)",
            "CFI-1108B - Russia, Ukraine, India, Central Asia (Digital Edition)",
            "CFI-1109A - China (Disc Edition)",
            "CFI-1109B - China (Digital Edition)",
            "CFI-1114A - South America (Disc Edition)",
            "CFI-1114B - South America (Digital Edition)",
            "CFI-1115A - US/Canada/Mexico (Disc Edition)",
            "CFI-1115B - US/Canada/Mexico (Digital Edition)",
            "CFI-1116A - Europe/Middle East/Africa (Disc Edition)",
            "CFI-1116B - Europe/Middle East/Africa (Digital Edition)",
            "CFI-1118A - Southeast Asia/HK/Macau/TW/S.Korea (Disc Edition)",
            "CFI-1118B - Southeast Asia/HK/Macau/TW/S.Korea (Digital Edition)",
            "CFI-1200A - Japan (Disc Edition)",
            "CFI-1200B - Japan (Digital Edition)",
            "CFI-1208A - Russia, Ukraine, India, Central Asia (Disc Edition)",
            "CFI-1208B - Russia, Ukraine, India, Central Asia (Digital Edition)",
            "CFI-1215A - US/Canada/Mexico (Disc Edition)",
            "CFI-1215B - US/Canada/Mexico (Digital Edition)",
            "CFI-1216A - Europe (Disc Edition)",
            "CFI-1216B - Europe (Digital Edition)",
            "CFI-1218A - Southeast Asia/HK/Macau/TW/S.Korea (Disc Edition)",
            "CFI-1218B - Southeast Asia/HK/Macau/TW/S.Korea (Digital Edition)"
        ]),
        ("PS5 Slim", [
            "CFI-2000A - Japan (Disc Edition)",
            "CFI-2000B - Japan (Digital Edition)",
            "CFI-2002A - Australia (Disc Edition)",
            "CFI-2002B - Australia (Digital Edition)",
            "CFI-2015A - US/Canada/Mexico (Disc Edition)",
            "CFI-2015B - US/Canada/Mexico (Digital Edition)",
            "CFI-2016A - Europe (Disc Edition)",
            "CFI-2016B - Europe (Digital Edition)",
            "CFI-2018A - Southeast Asia/HK/Macau/TW/S.Korea (Disc Edition)",
            "CFI-2018B - Southeast Asia/HK/Macau/TW/S.Korea (Digital Edition)"
        ]),
        ("PS5 Pro", [
            "CFI-7000B - Japan (Digital Edition)",
            "CFI-7002B - Australia (Digital Edition)",
            "CFI-7014B - South America (Digital Edition)",
            "CFI-7019B - US/Canada/Mexico (Digital Edition)",
            "CFI-7020B - Mexico (Digital Edition)",
            "CFI-7021B - Europe/Arab Emirates (Digital Edition)",
            "CFI-7022B - Southeast Asia/HK/Macau/TW/S.Korea (Digital Edition)"
        ]),
        ("Special/Limited Editions", [
            "CFI-1016A - Europe (Disc Edition, Ratchet & Clank)",
            "CFI-1116A - Europe (Disc Edition, Horizon Forbidden West)",
            "CFI-1216A - Europe (Disc Edition, Call of Duty MWII)",
            "CFI-20XXB - Global (Digital Edition, 30th Anniversary)",
            "CFI-70XXB - Global (Digital Edition, 30th Anniversary Limited Edition)"
        ]),
        ("TestKit/DevKit", [
            "DFI-T1000AA - Global (TestKit)",
            "DFI-D1000AA - Global (DevKit)"
        ])
    ]

    
    // MARK: - Sidebar Enum
    // Defines sidebar navigation items with associated icons
  
    @State private var selectedSidebarItem: SidebarItem? = .results // Default sidebar selection to Results tab

    // MARK: - Body
    // Main UI layout using NavigationSplitView
    var body: some View {
        NavigationSplitView {
            // Sidebar with navigation links for each section
            List(SidebarItem.allCases, selection: $selectedSidebarItem) { item in
                NavigationLink(value: item) {
                    Label(item.rawValue, systemImage: item.iconName)
                        .padding(.vertical, 2)
                        .accentColor(Color.customBlue)
                }
            }
            .listStyle(.sidebar)
            .frame(minWidth: 150, idealWidth: 180)
            .navigationTitle("PS5 NOR Modifier")
        } detail: {
            detailView // Renders the selected detail view based on sidebar selection
        }
    }

    // MARK: - Detail View
    // Conditionally renders the appropriate view based on sidebar selection
    @ViewBuilder
      var detailView: some View {
          switch selectedSidebarItem {
          case .results:
              resultsTab
          case .hexEditor:
              HexEditorView(data: $fileData)
                  .environmentObject(settings)
                  .frame(minWidth: 700, minHeight: 400)
          case .errorCodes:
              ErrorLookupView(
                  errorCodeInput: $errorCodeInput,
                  errorDescription: $errorDescription,
                  errorSolution: $errorSolution,
                  viewModel: errorLookupViewModel,
                  uartViewModel: uartViewModel
              )
              .padding()
          case .uart:
              UARTView()
                  .environmentObject(uartViewModel)
                  .padding()
          case .errorLog:
              NORDiffView()
          case .settings, .none:
              SettingsView(selectedBinFile: $selectedBinFile)
                  .environmentObject(authManager)
                  .padding(.bottom)
                  .frame(minWidth: 600, maxWidth: .infinity, maxHeight: .infinity)
                  .onAppear { errorLookupViewModel.loadErrorCodes() }
                  .environmentObject(settings)
          }
      }

    // MARK: - Results Tab
    // Displays NOR dump metadata and modification interface
    @ViewBuilder
    var resultsTab: some View {
        ScrollView {
            VStack(spacing: 10) {
                // Header with app branding and version information
                Image(systemName: "gamecontroller")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 50, height: 50)
                    .foregroundColor(.customBlue)
                Text("PS5 NOR Modifier")
                    .font(.title)
                    .fontWeight(.bold)
                Text("Current Version: \(versionFetcher.currentVersion)")
                Text("Latest Version: \(versionFetcher.latestVersion)")
                if versionFetcher.checkingUpdate {
                    ProgressView() // Show progress indicator during version check
                }
                Text("This is in development, use at your own risk")
                    .font(.subheadline)
                    .fontWeight(.semibold)
                    .foregroundColor(.red)
                    .multilineTextAlignment(.center)
            }
            .frame(maxWidth: .infinity, alignment: .center)

            // File selection interface
            HStack {
                Text("Select NOR Dump")
                    .font(.subheadline)
                Spacer()
                Button("Browse") {
                    let panel = NSOpenPanel()
                    panel.title = "Select a PS5 NOR Dump"
                    panel.message = "Choose a .bin file to decode"
                    panel.allowedContentTypes = [UTType(filenameExtension: "bin") ?? .item]
                    panel.allowsMultipleSelection = false
                    panel.canChooseDirectories = false
                    panel.canCreateDirectories = false

                    if panel.runModal() == .OK, let url = panel.url {
                        selectedFile = url
                        loadFile() // Load and process the selected NOR dump
                    }
                }
                .buttonStyle(.borderedProminent)
            }
            .padding(.horizontal)
            .padding(.vertical, 8)

            Divider()
            
            HStack {
                Picker("Model", selection: $selectedModelTab) {
                    ForEach(modelTabs, id: \.self) { tab in
                        Text(tab)
                    }
                }
                .pickerStyle(.segmented)
                .frame(maxWidth: 300)
                Spacer()
            }
            .padding(.horizontal)
            
            Divider()
            // Display metadata and modification inputs side by side
            HStack(alignment: .top, spacing: 20) {
                GroupBox(label: Text("Dump Results").font(.headline)) {
                    VStack(alignment: .leading, spacing: 8) {
                        Text("Serial Number: \(serialNumber)")
                        Divider()
                        Text("Motherboard Serial: \(motherboardSerial)")
                        Divider()
                        Text("Board Variant: \(boardVariant)")
                        Divider()
                        Text("PS5 Model: \(ps5Model)")
                        Divider()
                        Text("File Size: \(fileSize)")
                        Divider()
                        Text("WiFi MAC Address: \(wifiMacAddress)")
                        Divider()
                        Text("LAN MAC Address: \(lanMacAddress)")
                    }
                    .padding()
                    .frame(maxWidth: .infinity, alignment: .leading)
                }
                .frame(minWidth: 300, idealWidth: 350)

                GroupBox(label: Text("Modify Values").font(.headline)) {
                    VStack(alignment: .leading, spacing: 10) {
                        TextField("Serial Number", text: $modifiedSerialNumber)
                            .textFieldStyle(.roundedBorder)
                        Menu {
                            ForEach(filteredBoardVariantGroups, id: \.header) { group in
                                Section {
                                    ForEach(group.models, id: \.self) { variant in
                                        Button {
                                            modifiedBoardVariant = variant
                                        } label: {
                                            HStack {
                                                Text(variant)
                                                if modifiedBoardVariant == variant {
                                                    Spacer()
                                                    Image(systemName: "checkmark")
                                                }
                                            }
                                        }
                                    }
                                } header: {
                                    Text(group.header)
                                        .font(.caption)
                                        .foregroundColor(.secondary)
                                }
                                if group.header != groupedBoardVariantOptions.last?.header {
                                    Divider()
                                }
                            }
                        } label: {
                            Text(modifiedBoardVariant.isEmpty ? "Select Board Variant" : modifiedBoardVariant)
                                .frame(maxWidth: .infinity, alignment: .leading)
                                .padding(8)
                                .background(Color(NSColor.controlBackgroundColor))
                                .cornerRadius(6)
                        }
                        .pickerStyle(.menu)
                        Picker("PS5 Model", selection: $modifiedPs5Model) {
                            ForEach(ps5ModelOptions, id: \.self) { Text($0) }
                        }
                        .pickerStyle(.menu)
                        TextField("WiFi MAC Address", text: $modifiedWifiMacAddress)
                            .textFieldStyle(.roundedBorder)
                        TextField("LAN MAC Address", text: $modifiedLanMacAddress)
                            .textFieldStyle(.roundedBorder)
                        Button("Save New BIOS Information") {
                            if let data = generateModifiedNORData() {
                                modifiedNORData = data
                                saveAs(data: data) {
                                    showSaveConfirmation = true // Show confirmation after saving
                                }
                            } else {
                                showAlert(title: "Missing Data", message: "Please make sure all required fields are filled.")
                            }
                        }
                    }
                    .padding()
                    .frame(maxWidth: .infinity, alignment: .leading)
                }
                .frame(minWidth: 250, idealWidth: 350)
            }
            .padding()
        }
    }

    @ViewBuilder
    var slimTab: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 20) {
                Text("PS5 Slim Variant Editor")
                    .font(.title2)
                    .bold()
                    .padding(.bottom, 4)

                GroupBox(label: Text("Slim Board Variants")) {
                    Menu {
                        ForEach(groupedBoardVariantOptions.first(where: { $0.header == "PS5 Slim" })?.models ?? [], id: \.self) { variant in
                            Button {
                                modifiedBoardVariant = variant
                            } label: {
                                HStack {
                                    Text(variant)
                                    if modifiedBoardVariant == variant {
                                        Spacer()
                                        Image(systemName: "checkmark")
                                    }
                                }
                            }
                        }
                    } label: {
                        Text(modifiedBoardVariant.isEmpty ? "Select Slim Variant" : modifiedBoardVariant)
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding(8)
                            .background(Color(NSColor.controlBackgroundColor))
                            .cornerRadius(6)
                    }
                    .padding()
                }

                GroupBox(label: Text("Apply Slim Variant")) {
                    Button("Save as Slim Variant") {
                        if let data = generateModifiedNORData() {
                            modifiedNORData = data
                            saveAs(data: data) {
                                showSaveConfirmation = true
                            }
                        } else {
                            showAlert(title: "Error", message: "Unable to generate NOR data.")
                        }
                    }
                    .buttonStyle(.borderedProminent)
                    .padding()
                }

                Spacer()
            }
            .padding()
        }
    }
      var standardResultsView: some View {
          ScrollView {
              VStack(spacing: 10) {
                  Text("PS5 NOR Modifier")
                      .font(.title)
                      .fontWeight(.bold)
                  Text("Current Version: \(versionFetcher.currentVersion)")
                  Text("Latest Version: \(versionFetcher.latestVersion)")
                  if versionFetcher.checkingUpdate {
                      ProgressView()
                  }
                  Text("Use at your own risk")
                      .font(.subheadline)
                      .foregroundColor(.red)

                  Button("Switch to Slim View") {
                      showSlimResults = true
                  }
                  .buttonStyle(.borderedProminent)
              }
          }
      }
  
    // MARK: - Computed Properties
    // Checks if any user modifications differ from original values
    var hasChanges: Bool {
        return modifiedSerialNumber != serialNumber ||
               modifiedBoardVariant != boardVariant ||
               modifiedPs5Model != ps5Model ||
               modifiedWifiMacAddress != wifiMacAddress ||
               modifiedLanMacAddress != lanMacAddress
    }

    // MARK: - File Modification
    func generateSlimSafeNORData() -> Data? {
        guard !modifiedBoardVariant.isEmpty, !modifiedPs5Model.isEmpty else { return nil }

        var mutableData = fileData

        // Serial
        mutableData.writeAsciiString(modifiedSerialNumber, offset: Int(serialOffset), length: 16)

        // Board Variant (Slim-safe)
        let baseVariant = modifiedBoardVariant.components(separatedBy: " -").first ?? modifiedBoardVariant
        let paddedVariant = baseVariant.padding(toLength: 19, withPad: "\0", startingAt: 0)
        switch selectedModelTab {
        case "Slim":
            mutableData.writeAsciiString(baseVariant, offset: Int(variantOffset), length: 12)
        case "Pro":
            mutableData.writeAsciiString(baseVariant, offset: Int(variantOffset), length: 10)
        default: // Phat
            mutableData.writeAsciiString(baseVariant, offset: Int(variantOffset), length: 19)
        }
        // Model Signatures
        let discSignature: [UInt8] = [0x22, 0x02, 0x01, 0x01]
        let digitalSignature: [UInt8] = [0x22, 0x03, 0x01, 0x01]
        let emptyBytes = [UInt8](repeating: 0x00, count: 12)

        switch modifiedPs5Model {
        case "Disc Edition":
            mutableData.writeBytes(discSignature, offset: Int(offsetOne))
            mutableData.writeBytes(emptyBytes, offset: Int(offsetTwo))
        case "Digital Edition":
            mutableData.writeBytes(digitalSignature, offset: Int(offsetTwo))
            mutableData.writeBytes(emptyBytes, offset: Int(offsetOne))
        default:
            break
        }

        // MACs
        if let wifiMacData = macAddressStringToData(modifiedWifiMacAddress) {
            mutableData.writeBytes([UInt8](wifiMacData), offset: Int(wifiMacOffset))
        }
        if let lanMacData = macAddressStringToData(modifiedLanMacAddress) {
            mutableData.writeBytes([UInt8](lanMacData), offset: Int(lanMacOffset))
        }

        return mutableData
    }
    // Generates modified NOR data based on user inputs
    func generateModifiedNORData() -> Data? {
        guard !modifiedBoardVariant.isEmpty, !modifiedPs5Model.isEmpty else { return nil }

        var mutableData = fileData // Copy of original file data

        // Write Serial Number
        mutableData.writeAsciiString(modifiedSerialNumber, offset: Int(serialOffset), length: 16)

        // Write Board Variant
        let baseVariant = modifiedBoardVariant.components(separatedBy: " -").first ?? modifiedBoardVariant
        mutableData.writeAsciiString(baseVariant, offset: Int(variantOffset), length: 19)

        // Write PS5 Model signatures
        let discSignature: [UInt8] = [0x22, 0x02, 0x01, 0x01]
        let digitalSignature: [UInt8] = [0x22, 0x03, 0x01, 0x01]
        let emptyBytes = [UInt8](repeating: 0x00, count: 12)

        switch modifiedPs5Model {
        case "Disc Edition":
            mutableData.writeBytes(discSignature, offset: Int(offsetOne))
            mutableData.writeBytes(emptyBytes, offset: Int(offsetTwo))
        case "Digital Edition":
            mutableData.writeBytes(digitalSignature, offset: Int(offsetTwo))
            mutableData.writeBytes(emptyBytes, offset: Int(offsetOne))
        default:
            break
        }

        // Write MAC Addresses
        if let wifiMacData = macAddressStringToData(modifiedWifiMacAddress) {
            mutableData.writeBytes([UInt8](wifiMacData), offset: Int(wifiMacOffset))
        }
        if let lanMacData = macAddressStringToData(modifiedLanMacAddress) {
            mutableData.writeBytes([UInt8](lanMacData), offset: Int(lanMacOffset))
        }

        return mutableData
    }
    private var filteredBoardVariantGroups: [(header: String, models: [String])] {
        switch selectedModelTab {
        case "Slim":
            return groupedBoardVariantOptions.filter { $0.header.contains("Slim") }
        case "Pro":
            return groupedBoardVariantOptions.filter { $0.header.contains("Pro") }
        case "Phat":
            return groupedBoardVariantOptions.filter {
                $0.header.contains("FAT") || $0.header.contains("Standard") || $0.header.contains("Special") || $0.header.contains("TestKit")
            }
        default:
            return groupedBoardVariantOptions
        }
    }
    
    // Saves modified NOR data to a new file
    func saveAs(data: Data, suggestedName: String = "ModifiedNOR.bin", onSuccess: @escaping () -> Void) {
        let panel = NSSavePanel()
        panel.title = "Save Modified NOR File"
        panel.nameFieldStringValue = suggestedName
        panel.allowedContentTypes = [.data]
        panel.canCreateDirectories = true

        if panel.runModal() == .OK, let url = panel.url {
            do {
                try data.write(to: url)
                onSuccess() // Trigger success callback
            } catch {
                print("Error saving: \(error)")
            }
        }
    }
        
    // MARK: - File Loading
    // Loads and processes the selected NOR dump file
    private func loadFile() {
        guard let fileURL = selectedFile else { return }
        do {
            fileData = try Data(contentsOf: fileURL)
            selectedFileURL = fileURL // Store file URL
            loadMetadataFromFile() // Extract metadata from file
            showAlert(title: "Success", message: "File loaded: \(fileURL.lastPathComponent)")
        } catch {
            showAlert(title: "Error", message: "Failed to read file: \(error.localizedDescription)")
        }
    }
            
    // Extracts metadata (serial, model, MACs, etc.) from loaded file
    private func loadMetadataFromFile() {
        guard fileData.count > 0 else {
            showAlert(title: "Error", message: "No file data loaded.")
            return
        }
        
        fileSize = "\(fileData.count) bytes (\(fileData.count / 1024 / 1024) MB)"
        
        // Serial Number
        if fileData.count >= serialOffset + 16 {
            serialNumber = readCString(from: fileData, at: Int(serialOffset), maxLength: 16) ?? "Unknown"
            modifiedSerialNumber = serialNumber != "Unknown" ? serialNumber : ""
        }
        
        // Motherboard Serial
        if fileData.count >= moboSerialOffset + 16 {
            motherboardSerial = readCString(from: fileData, at: Int(moboSerialOffset), maxLength: 16) ?? "Unknown"
        }
        
        // Board Variant
        if fileData.count >= variantOffset + 19 {
            if let variant = readCString(from: fileData, at: Int(variantOffset), maxLength: 19)?
                .trimmingCharacters(in: .whitespacesAndNewlines)
                .uppercased() {

                if let matchedVariant = flatBoardVariantOptions.first(where: { $0.uppercased().hasPrefix(variant) }) {
                    boardVariant = matchedVariant
                    modifiedBoardVariant = matchedVariant
                } else {
                    boardVariant = "Unrecognized (\(variant))"
                    modifiedBoardVariant = ""
                }
            } else {
                boardVariant = "Unknown"
                modifiedBoardVariant = ""
            }
        }
        // PS5 Model
        ps5Model = readPs5ModelFromData() ?? "Unknown"
        modifiedPs5Model = ps5Model
        
        // WiFi MAC Address
        if fileData.count >= wifiMacOffset + 6 {
            wifiMacAddress = readMACAddress(from: fileData, at: Int(wifiMacOffset)) ?? "Unknown"
            modifiedWifiMacAddress = wifiMacAddress != "Unknown" ? wifiMacAddress : ""
        }
        
        // LAN MAC Address
        if fileData.count >= lanMacOffset + 6 {
            lanMacAddress = readMACAddress(from: fileData, at: Int(lanMacOffset)) ?? "Unknown"
            modifiedLanMacAddress = lanMacAddress != "Unknown" ? lanMacAddress : ""
        }
    }
            
    // Reads a null-terminated string from data at a given offset
    private func readCString(from data: Data, at offset: Int, maxLength: Int) -> String? {
        guard offset + maxLength <= data.count else { return nil }
        let subdata = data[offset..<Swift.min(offset + maxLength, data.count)]
        return String(bytes: subdata.prefix { $0 != 0 }, encoding: .utf8)?.trimmingCharacters(in: .controlCharacters)
    }
            
    // Reads a MAC address from data at a given offset
    private func readMACAddress(from data: Data, at offset: Int) -> String? {
        guard offset + 6 <= data.count else { return nil }
        let macBytes = data[offset..<(offset + 6)]
        return macBytes.map { String(format: "%02X", $0) }.joined(separator: ":")
    }
            
    // Determines PS5 model (Disc or Digital) from file data
    private func readPs5ModelFromData() -> String? {
        guard fileData.count > 0 else { return nil }
        if fileData.count >= offsetOne + 12 {
            let range = Int(offsetOne)..<Int(offsetOne + 12)
            let dataSlice = fileData.subdata(in: range)
            let hexString = dataSlice.map { String(format: "%02X", $0) }.joined()
            if hexString.contains("22020101") {
                return "Disc Edition"
            }
        }
        if fileData.count >= offsetTwo + 12 {
            let range = Int(offsetTwo)..<Int(offsetTwo + 12)
            let dataSlice = fileData.subdata(in: range)
            let hexString = dataSlice.map { String(format: "%02X", $0) }.joined()
            if hexString.contains("22030101") {
                return "Digital Edition"
            }
        }
        return "Unknown"
    }
            
    // Saves modified data back to the original file
    private func saveFile() {
        guard let fileURL = selectedFile else {
            showAlert(title: "Error", message: "No file selected to save.")
            return
        }
        
        guard !modifiedBoardVariant.isEmpty, !modifiedPs5Model.isEmpty else {
            showAlert(title: "Error", message: "Please select a valid board variant and PS5 model.")
            return
        }
        
        var mutableData = fileData
        
        // Write Serial Number
        mutableData.writeAsciiString(modifiedSerialNumber, offset: Int(serialOffset), length: 16)
        
        // Write Board Variant
        let baseVariant = modifiedBoardVariant.components(separatedBy: " -").first ?? modifiedBoardVariant
        mutableData.writeAsciiString(baseVariant, offset: Int(variantOffset), length: 19)
        
        // Write PS5 Model signatures
        let discSignature: [UInt8] = [0x22, 0x02, 0x01, 0x01]
        let digitalSignature: [UInt8] = [0x22, 0x03, 0x01, 0x01]
        let emptyBytes = [UInt8](repeating: 0x00, count: 12)
        switch modifiedPs5Model {
        case "Disc Edition":
            mutableData.writeBytes(discSignature, offset: Int(offsetOne))
            mutableData.writeBytes(emptyBytes, offset: Int(offsetTwo))
        case "Digital Edition":
            mutableData.writeBytes(digitalSignature, offset: Int(offsetTwo))
            mutableData.writeBytes(emptyBytes, offset: Int(offsetOne))
        default:
            break
        }
        
        // Write MAC Addresses
        if let wifiMacData = macAddressStringToData(modifiedWifiMacAddress) {
            mutableData.writeBytes([UInt8](wifiMacData), offset: Int(wifiMacOffset))
        }
        if let lanMacData = macAddressStringToData(modifiedLanMacAddress) {
            mutableData.writeBytes([UInt8](lanMacData), offset: Int(lanMacOffset))
        }
        
        do {
            try mutableData.write(to: fileURL)
            fileData = mutableData
            loadMetadataFromFile() // Refresh metadata after saving
            showAlert(title: "Success", message: "File saved successfully.")
        } catch {
            showAlert(title: "Error", message: "Failed to save file: \(error.localizedDescription)")
        }
    }
            
    // Converts a MAC address string (e.g., "00:11:22:33:44:55") to Data
    private func macAddressStringToData(_ mac: String) -> Data? {
        let components = mac.trimmingCharacters(in: .whitespacesAndNewlines).split(separator: ":")
        guard components.count == 6 else { return nil }
        var bytes = [UInt8]()
        for comp in components {
            guard let byte = UInt8(comp, radix: 16) else { return nil }
            bytes.append(byte)
        }
        return Data(bytes)
    }
            
    // Displays an alert with a given title and message
    private func showAlert(title: String, message: String) {
        let alert = NSAlert()
        alert.messageText = title
        alert.informativeText = message
        alert.alertStyle = .informational
        alert.addButton(withTitle: "OK")
        alert.runModal()
    }
}

// MARK: - Data Extensions
// Helper methods for manipulating Data objects
extension Data {
    // Writes an ASCII string to a specific offset with padding
    mutating func writeAsciiString(_ string: String, offset: Int, length: Int) {
        var bytes = [UInt8](repeating: 0x00, count: length)
        let asciiString = string.prefix(length)
        let asciiBytes = Array(asciiString.utf8)
        for i in 0..<Swift.min(asciiBytes.count, length) {
            bytes[i] = asciiBytes[i]
        }
        self.replaceSubrange(offset..<offset+length, with: bytes)
    }
    
    // Writes bytes to a specific offset
    mutating func writeBytes(_ bytes: [UInt8], offset: Int) {
        guard offset + bytes.count <= self.count else { return }
        self.replaceSubrange(offset..<offset+bytes.count, with: bytes)
    }
}

// MARK: - Helper Functions
// Launches the UpdaterHelperGUI with a specified zip file path
func launchHelper(withZipPath zipPath: String) {
    let helperPath = Bundle.main.path(forResource: "UpdaterHelperGUI", ofType: "app", inDirectory: "Contents/Helpers")!
    let executablePath = "\(helperPath)/Contents/MacOS/UpdaterHelperGUI"

    let process = Process()
    process.executableURL = URL(fileURLWithPath: executablePath)
    process.arguments = [zipPath]

    do {
        try process.run()
    } catch {
        print("Failed to launch helper: \(error)")
    }
}

// Runs the updater process with completion callback
func runUpdater(completion: @escaping (Bool, String) -> Void) {
    guard let helperURL = Bundle.main.bundleURL.appendingPathComponent("Contents/Helpers/UpdaterHelperGUI.app") as URL? else {
        completion(false, "Helper app not found")
        return
    }
    
    let executableURL = helperURL.appendingPathComponent("Contents/MacOS/UpdaterHelperGUI")
    
    let task = Process()
    task.executableURL = executableURL
    
    // Example arguments (update path as needed)
    task.arguments = ["--update", "/path/to/update.zip"]
    
    task.terminationHandler = { process in
        if process.terminationStatus == 0 {
            completion(true, "Updater finished successfully")
        } else {
            completion(false, "Updater exited with code \(process.terminationStatus)")
        }
    }
    
    do {
        try task.run()
    } catch {
        completion(false, "Failed to launch helper: \(error.localizedDescription)")
    }
}

// MARK: - Color Extension
// Custom color initialization for hex values
extension Color {
    static let customBlue = Color(hex: "006FCD") // Custom blue color used in UI
    
    init(hex: String) {
        let hex = hex.trimmingCharacters(in: CharacterSet.alphanumerics.inverted)
        var int: UInt64 = 0
        Scanner(string: hex).scanHexInt64(&int)
        let r, g, b: UInt64
        switch hex.count {
        case 6:
            r = (int >> 16) & 0xFF
            g = (int >> 8) & 0xFF
            b = int & 0xFF
        default:
            r = 0; g = 0; b = 0
        }
        self.init(
            .sRGB,
            red: Double(r) / 255,
            green: Double(g) / 255,
            blue: Double(b) / 255,
            opacity: 1
        )
    }
}

// MARK: - File Picker
// Opens a file picker for selecting .bin files
func showBinFilePicker(completion: @escaping (URL?) -> Void) {
    let panel = NSOpenPanel()
    panel.title = "Select a .bin File"
    panel.allowedContentTypes = [.init(filenameExtension: "bin")!]
    panel.allowsMultipleSelection = false
    panel.canChooseDirectories = false
    panel.begin { result in
        if result == .OK {
            completion(panel.url)
        } else {
            completion(nil)
        }
    }
}

// MARK: - Preview
// SwiftUI preview for ContentView
struct ContentView_Previews: PreviewProvider {
    static var previews: some View {
        ContentView()
    }
}
